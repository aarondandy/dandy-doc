@using DandyDoc.Overlays.DisplayName
@using DandyDoc.ViewModels
@using Mono.Cecil
@using Mvc4WebDirectDocSample.Infrastructure
@model IEnumerable<DandyDoc.ViewModels.GenericParameterViewModelBase>
@functions{

	private static readonly DisplayNameOverlay FullNameOverlay = new DisplayNameOverlay {
		IncludeNamespaceForTypes = true,
		IncludeParameterNames = true,
		ShowGenericParametersOnDefinition = true,
		ShowTypeNameForMembers = true
	};

	private string GetLink(TypeReference reference) {
		if (null == reference)
			return null;
		var linkResolver = ViewBag.TypeDefinitionLinkResolver as TypeDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(reference);
	}

	private IHtmlString GetItemContent(TypeReference reference) {
		if (null == reference)
			return null;
		var coreText = HttpUtility.HtmlEncode(FullNameOverlay.GetDisplayName(reference));
		var link = GetLink(reference);
		if (!String.IsNullOrEmpty(link)) {
			coreText = String.Concat("<a href=\"", link, "\">", coreText, "</a>");
		}
		return Html.Raw(coreText);
	}
	
	private IHtmlString GetItemContent(GenericParameterViewModelBase.IConstraint c){
		var typeConstraint = c as GenericParameterViewModelBase.TypeConstraint;
		if (null == typeConstraint) {
			return Html.Raw(c.DisplayName);
		}
		return GetItemContent(typeConstraint.Reference);
	}
}
<h2>Generic Parameters</h2>
<dl>
	@foreach (var p in Model){
		<dt>@p.DisplayName</dt>
		<dd>
			@if (p.HasXmlDoc){
				<p>@{Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", p.XmlDoc);}</p>
			}
			@if (p.Parameter.IsContravariant){
				<div><i class="icon-random"></i> Contravariant: Type is used for input and can be used with a more specific type.</div>
			}
			@if (p.Parameter.IsCovariant){
				<div><i class="icon-random"></i> Covariant: Type is used for output and can be used as a more general type.</div>
			}
			@if (p.HasConstraints){
				<div>
					Constraints:
					<ul>
						@foreach (var c in p.Constraints) {
							<li>@GetItemContent(c)</li>
						}
					</ul>
				</div>
			}
		</dd>
	}
</dl>
