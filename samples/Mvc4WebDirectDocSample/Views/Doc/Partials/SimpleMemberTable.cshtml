@using DandyDoc.ViewModels
@using Mono.Cecil
@using Mvc4WebDirectDocSample.Infrastructure
@model IEnumerable<IDefinitionViewModel>
@functions{

	public static bool IsForSummary(MemberFlair flair) {
		if (null == flair)
			return false;
		if ("public".Equals(flair.Id, StringComparison.OrdinalIgnoreCase))
			return false;
		if ("operator".Equals(flair.Id, StringComparison.OrdinalIgnoreCase))
			return false;
		return true;
	}

	private string GetLink(string cref) {
		if (String.IsNullOrEmpty(cref))
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(cref);
	}

	private string GetLink(IDefinitionViewModel definition) {
		if (null == definition)
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(definition.Definition);
	}

	private string GetLink(TypeReference reference) {
		if (null == reference)
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(reference);
	}		

	private IHtmlString GetItemContent(IDefinitionViewModel definition) {
		if (null == definition)
			return null;
		var coreText = HttpUtility.HtmlEncode(definition.ShortName);
		var link = GetLink(definition)
			?? GetLink(definition.Cref);
		if (!String.IsNullOrEmpty(link)) {
			coreText = String.Concat("<a href=\"", link, "\">", coreText, "</a>");
		}
		return Html.Raw(coreText);
	}

	private IHtmlString GetItemContent(TypeReferenceViewModel model) {
		if (null == model)
			return null;
		var coreText = HttpUtility.HtmlEncode(model.ShortName);
		var link = GetLink(model.Reference);
		if (!String.IsNullOrEmpty(link)) {
			coreText = String.Concat("<a href=\"", link, "\">", coreText, "</a>");
		}
		return Html.Raw(coreText);
	}		

}
<table class="table table-bordered">
	<thead><tr><th><i class="icon-info-sign"></i></th><th>Name</th><th>Description</th></tr></thead>
	<tbody>
	@foreach (var member in Model.OrderBy(x => x.ShortName)) {
		<tr>
			<td>@{foreach (var flair in member.Flair.Where(IsForSummary)) { Html.RenderPartial("Partials/FlairIcon", flair); }}</td>
			<td>@GetItemContent(member)</td>
			<td>
				@{
					if (null != member.Summary){
						Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", member.Summary);
					}
					if (member.MemberDeclaredInAnotherType){
						<text>(Decalred in @GetItemContent(new TypeReferenceViewModel(member.Definition.DeclaringType)).)</text>
					}
				}
			</td>
		</tr>
	}
</tbody></table>