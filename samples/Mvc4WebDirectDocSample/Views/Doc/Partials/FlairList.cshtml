@model IList<string>
@functions{

	public static string IconRemaps(string flair){
		if (String.IsNullOrEmpty(flair)) return flair;
		var upperFlair = flair.ToUpperInvariant();
		if ("PUBLIC" == upperFlair)
			return null;
		if ("PROTECTED" == upperFlair)
			return "icon-eye-close";
		return upperFlair;
	}
	
	public static bool IsOk(string flair){
		if (String.IsNullOrEmpty(flair))
			return false;
		if ("PUBLIC".Equals(flair, StringComparison.OrdinalIgnoreCase))
			return false;
		return true;
	}

}
@{foreach (var flair in Model.Where(x => IsOk(x)).Select(x => x.ToUpperInvariant())) {
	switch (flair){
		case "PROTECTED" :{
			<i class="icon-eye-close" title="protected"></i>
			break;
		}
		case "PURE":{
			<i class="icon-leaf" title="pure"></i>
			break;
		}
		case "STATIC":{
			<i class="icon-globe" title="static"></i>
			break;
		}
		case "GET":{
			<code>get</code>
			break;
		}
		case"PROGET":{
			<code><i class="icon-eye-close" title="protected get"></i>get</code>
			break;
		}
		case "SET":{
			<code>set</code>
			break;
		}
		case"PROSET":{
			<code><i class="icon-eye-close" title="protected set"></i>set</code>
			break;
		}
		case "EXTENSION":{
			<i class="icon-resize-full" title="extension"></i>
			break;
		}
		case "NONULLS":{
			<i class="icon-ok-sign" title="no nulls"></i>
			break;
		}
		default:{
			@flair
			break;
		}
	}
}}