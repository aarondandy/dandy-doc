@using DandyDoc.ViewModels
@using Mono.Cecil
@using Mvc4WebDirectDocSample.Infrastructure
@model IEnumerable<ExceptionGroupViewModel>
@functions{

	private string GetLink(string cref){
		if (String.IsNullOrEmpty(cref))
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(cref);
	}

	private string GetLink(TypeReference reference){
		if (null == reference)
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(reference);
	}

	private IHtmlString GetItemContent(ExceptionGroupViewModel exception) {
		if (null == exception)
			return null;
		var coreText = HttpUtility.HtmlEncode(exception.ShortName);
		var link = GetLink(exception.ExceptionTypeReference)
			?? GetLink(exception.ExceptionTypeCref);
		if (!String.IsNullOrEmpty(link)) {
			coreText = String.Concat("<a href=\"", link, "\">", coreText, "</a>");
		}
		return Html.Raw(coreText);
	}

}
<h2>Exceptions</h2>
<table class="table table-bordered table-condensed">
	<thead><tr><th>Exception</th><th>Condition</th></tr></thead>
	<tbody>
	@foreach (var exception in Model){
	<tr>
		<td>@GetItemContent(exception)</td>
		<td>
			@{
				var conditions = exception.XmlConditions;
				var ensures = exception.XmlEnsures;
				if (conditions.Count == 1 && ensures.Count == 0) {
					Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", conditions[0]);
				}
				else if(conditions.Count > 0 || ensures.Count > 0) {
					var sets = new[] {
						new {Title = "Conditions", Items = ensures},
						new {Title = "Ensures", Items = ensures}
					};
					<dl>
						@foreach (var set in sets.Where(s => s.Items.Count > 0)) {
							<dt>@(set.Title):</dt>
							<dd>
								@if (set.Items.Count == 1) {
									Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", set.Items[0]);
								}
								else {
									<ul>
										@foreach(var item in set.Items){
											<li>@{Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", item);}</li>
										}
									</ul>
								}
							</dd>
						}
					</dl>
				}
			}
		</td>
	</tr>
	}
</tbody></table>