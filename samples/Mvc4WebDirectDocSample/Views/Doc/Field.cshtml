@using DandyDoc.ViewModels
@using Mono.Cecil
@using Mvc4WebDirectDocSample.Infrastructure
@model FieldViewModel
@{
	ViewBag.Title = Model.Title;
	Layout = "_Layout.cshtml";
}
@functions{

	private string GetLink(TypeReference reference) {
		if (null == reference)
			return null;
		var linkResolver = ViewBag.MemberDefinitionLinkResolver as MemberDefinitionLinkResolver;
		return null == linkResolver ? null : linkResolver.GetLink(reference);
	}

	private IHtmlString GetItemContent(FieldViewModel model) {
		var reference = Model.Definition.FieldType;
		if (null == reference)
			return null;
		var coreText = HttpUtility.HtmlEncode(model.FieldTypeDisplayName);
		var link = GetLink(reference);
		if (!String.IsNullOrEmpty(link)) {
			coreText = String.Concat("<a href=\"", link, "\">", coreText, "</a>");
		}
		return Html.Raw(coreText);
	}
}
@{
	Html.RenderPartial("Partials/DefinitionTitle", Model);
	if (Model.HasSummary) {Html.RenderPartial("Partials/SummarySection", Model.Summary);}
	if (Model.Flair.Count > 0) {Html.RenderPartial("Partials/FlairTable", Model.Flair);}
	Html.RenderPartial("Partials/NamespaceAndAssembly", Model.AssemblyNamespace);
	if (Model.HasSignatures) { Html.RenderPartial("Partials/DefinitionSignatures", Model.Signatures); }	
	<div>Type: @GetItemContent(Model)</div>
	if (Model.HasValueDoc) {Html.RenderPartial("Partials/ValueSection", Model.ValueDoc); }
	Html.RenderPartial("Partials/DefinitionPageCommonSections", Model);
}