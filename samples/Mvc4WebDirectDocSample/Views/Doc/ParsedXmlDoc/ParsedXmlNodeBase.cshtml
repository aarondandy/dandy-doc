@using DandyDoc.Core.Overlays.XmlDoc
@model ParsedXmlNodeBase
@functions{
	public void RenderChildren(){
		Html.RenderPartial("ParsedXmlDoc/ParsedXmlNodeBaseChildren", Model);	
	}
}
@if (null == Model){
	return;
}
else if (Model is ParsedXmlTextNode){@Html.Raw(Model.Node.OuterXml);}
else if (Model is ParsedXmlListElement) { Html.RenderPartial("ParsedXmlDoc/ParsedXmlListElement", (ParsedXmlListElement)Model);}
else if (Model is ParsedXmlElementBase){
	if (Model is ParsedXmlCode){
		if (((ParsedXmlCode) Model).Inline){<code>@{RenderChildren();}</code>}
		else{<pre>@{RenderChildren();}</pre>}
	}
	else if(Model is ParsedXmlParagraphElement){<p>@{RenderChildren();}</p>}
	else if(Model is ParsedXmlParamrefElement){<code>@{
		var paramrefElm = (ParsedXmlParamrefElement)Model;
		if (paramrefElm.Children.Count > 0){
			RenderChildren();
		}
		else{
			@paramrefElm.ParameterName
		}
	}</code>}
	else if (Model is ParsedXmlSeeElement){
		var seeElm = (ParsedXmlSeeElement) Model;
		var link = String.IsNullOrEmpty(seeElm.HRef)
			? Url.Action("Index","Doc",new {cref = seeElm.CRef})
			: seeElm.HRef;
		<a href="@link">
			@if (seeElm.Children.Count > 0){
				RenderChildren();
			}
			else{
				if (null == seeElm.CrefTarget){
					@link
				}
				else{
					// TODO: short name from view model?
					@seeElm.CrefTarget.Name
				}
			}
		</a>
	}
	else{@Html.Raw(Model.PrefixXml) RenderChildren(); @Html.Raw(Model.SuffixXml)}
}