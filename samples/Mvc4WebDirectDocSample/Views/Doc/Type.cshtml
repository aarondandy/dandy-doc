@using DandyDoc.ViewModels
@model TypeViewModel
@{
	ViewBag.Title = Model.Title;
	Layout = "_Layout.cshtml";
}
@{Html.RenderPartial("Partials/DefinitionTitle", Model);}
@{
	if (null != Model.Summary) { Html.RenderPartial("Partials/SummarySection", Model.Summary);}
	if (Model.Flair.Count > 0) {Html.RenderPartial("Partials/FlairTable", Model.Flair);}
	Html.RenderPartial("Partials/NamespaceAndAssembly", Model.AssemblyNamespace);
	if(Model.HasSignatures){Html.RenderPartial("Partials/DefinitionSignatures", Model.Signatures);}
}
@if (Model.HasBaseChain || Model.HasImplementedInterfaces) {
	<h2>Inheritance</h2>
	<div class="thumbnails">
	@if (Model.HasBaseChain) {
			<dl class="span6">
				<dt>Base Types</dt>
				<dd>@{ Html.RenderPartial("Partials/TypeReferenceList", Model.ToTypeReferenceViewModels(Model.BaseChain.Reverse())); }</dd>
			</dl>
	}
	@if (Model.HasImplementedInterfaces) {
			<dl class="span6">
				<dt>Implements</dt>
				<dd>@{ Html.RenderPartial("Partials/TypeReferenceList", Model.ToTypeReferenceViewModels(Model.ImplementedInterfaces)); }</dd>
			</dl>
	}
	</div>
}
@if (Model.Definition.HasGenericParameters){
	Html.RenderPartial("Partials/GenericParameterListing", Model.ToGenericParameterViewModels(Model.Definition.GenericParameters));
}
@foreach (var section in Model.GetDefaultMemberListingSections()){
	<h2>@(section.Title)</h2>
	Html.RenderPartial("Partials/SimpleMemberTable", section.Items);
}
@{Html.RenderPartial("Partials/DefinitionPageCommonSections", Model);}