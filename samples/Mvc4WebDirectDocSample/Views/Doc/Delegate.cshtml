@using DandyDoc
@using DandyDoc.ViewModels
@model DelegateViewModel
@{
	ViewBag.Title = Model.Title;
	Layout = "_Layout.cshtml";
}
@{
	Html.RenderPartial("Partials/DefinitionTitle", Model);
	if (null != Model.Summary) { Html.RenderPartial("Partials/SummarySection", Model.Summary);}
	if (Model.Flair.Count > 0) {Html.RenderPartial("Partials/FlairTable", Model.Flair);}
	Html.RenderPartial("Partials/NamespaceAndAssembly", Model.AssemblyNamespace);
	if(Model.HasSignatures){Html.RenderPartial("Partials/DefinitionSignatures", Model.Signatures);}
	if (Model.Definition.HasGenericParameters){Html.RenderPartial("Partials/GenericParameterListing", Model.ToGenericParameterViewModels(Model.Definition.GenericParameters));}
	var parameters = Model.Definition.GetDelegateTypeParameters();
	if (null != parameters && parameters.Count > 0){
		<h2>Parameters</h2>
		Html.RenderPartial("Partials/ParameterListing", Model.CreateParameterViewModels(parameters));
	}
	if (Model.HasReturn) {Html.RenderPartial("Partials/ReturnsSection", Model.CreateReturnViewModel());}
	if (Model.HasExceptions) { Html.RenderPartial("Partials/ExceptionSection", Model.ToExceptionViewModels(Model.Exceptions)); }
	Html.RenderPartial("Partials/DefinitionPageCommonSections", Model);
}