@model DandyDoc.Core.TypeRecord

@{
	Layout = "DocLayout.cshtml";
}

<h2>@Model.Name @(Model.IsValueType ? "Struct" : "Class")</h2>
<div>@Model.FullName in @Model.Parent.CoreAssemblyFilePath.Name</div>
<hr/>
@{Html.RenderPartial("ParsedXmlDoc", Model.Summary);}

<h3>Members</h3>

@if (Model.HasConstructors) {
	<h4>Constructors</h4>
	<div class="member-table-container">
	<table class="member-table">
		<tr><th></th><th>Name</th><th>Summary</th></tr>
		@foreach(var constructor in Model.Constructors.OrderBy(x => x.Name)) {
			<tr>
				<td></td>
				<td>@constructor.FriendlyName</td>
				<td>@{
					    if (null == constructor.Summary || String.IsNullOrWhiteSpace(constructor.Summary.InnerXml)) {
						    @Html.Raw(String.Format(constructor.Parameters.Count == 0 ? "Default {0} constructor." : "{0} constructor.", Model.Name));
					    }
					    else {
						    Html.RenderPartial("ParsedXmlDoc", constructor.Summary);
					    }
				    }</td>
			</tr>
		}
	</table>
	</div>
}

@if (Model.HasFields) {
	<h4>Fields</h4>
	<div class="member-table-container">
	<table class="member-table">
		<tr><th></th><th>Name</th><th>Type</th><th>Summary</th></tr>
		@foreach(var field in Model.Fields.OrderBy(x => x.Name)) {
			<tr>
				<td></td>
				<td><a href="@Url.Action("Member",new{cref=field.Cref})">@field.Name</a></td>
				<td>@field.Type</td>
				<td>@{Html.RenderPartial("ParsedXmlDoc", field.Summary);}</td>
			</tr>
		}
	</table>
	</div>
}

@if (Model.HasProperties) {
	<h4>Properties</h4>
	<div class="member-table-container">
	<table class="member-table">
		<tr><th></th><th>Name</th><th>Type</th><th>Summary</th></tr>
		@foreach(var property in Model.Properties.OrderBy(x => x.Name)) {
			<tr>
				<td></td>
				<td><a href="@Url.Action("Member",new{cref=property.Cref})">@property.Name</a></td>
				<td>@property.Type</td>
				<td>@{Html.RenderPartial("ParsedXmlDoc", property.Summary);}</td>
			</tr>
		}
	</table>
	</div>
}

@if (Model.HasMethods) {
	<h4>Methods</h4>
	<div class="member-table-container">
	<table class="member-table">
		<tr><th></th><th>Name</th><th>Summary</th></tr>
		@foreach(var method in Model.Methods.OrderBy(x => x.Name)) {
			<tr>
				<td></td>
				<td>
					<a href="@Url.Action("Member",new{cref=method.Cref})">@method.Name</a>
				</td>
				<td>@{Html.RenderPartial("ParsedXmlDoc", method.Summary);}</td>
			</tr>
		}
	</table>
	</div>
}

<h4>Operators</h4>

@if (Model.HasNestedTypes) {
	<h3>Nested Types</h3>
	<div class="member-table-container">
	<table class="member-table">
		<tr><th></th><th>Name</th><th>Summary</th></tr>
		@foreach(var nested in Model.NestedTypeRecords.OrderBy(x => x.Name)) {
			<tr>
				<td></td>
				<td><a href="@Url.Action("Type",new{cref=nested.Cref})">@nested.Name</a></td>
				<td>@{Html.RenderPartial("ParsedXmlDoc", nested.Summary);}</td>
			</tr>
		}
	</table>
	</div>
}

@{ var remarks = Model.Remarks;}
@if (null != remarks && remarks.Count > 0){
	<h3>Remarks</h3>
	foreach (var remark in remarks){
		<div>@{ Html.RenderPartial("ParsedXmlDoc", remark); }</div>
	}
}

@{ var examples = Model.Examples;}
@if (null != examples && examples.Count > 0){
	<h3>Examples</h3>
	foreach (var example in examples){
		<div>@{ Html.RenderPartial("ParsedXmlDoc", example); }</div>
	}
}

@{ var seeAlsos = Model.SeeAlso;}
@if (null != seeAlsos && seeAlsos.Count > 0){
	<h3>See Also</h3>
	<ul>
	@foreach (var seeAlso in seeAlsos) {
		<li>@{ Html.RenderPartial("SeeAlso", seeAlso); }</li>	
	}
	</ul>
}