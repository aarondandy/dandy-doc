@{
  Layout = "~/Views/Docs/_Layout.cshtml";
  ViewBag.Title = "Dandy Doc Documentation";
  ViewBag.SubTitle = "Getting Started";
}

      <section>
        <h2>Step by Step</h2>
        <p class="lead">
          The basic idea is to start with some data, in this case a .NET assembly.
          Next create some models for the data you want to present.
          Finally use the models to present some documentation.
        </p>

        <h3>Step 1: Data</h3>
        <p>
          First start with your data. With Dandy Doc a .NET assembly and its accompanying files are the source of your documentation data.
        </p>
        <pre>var assemblies = new AssemblyDefinitionCollection("QuickStartSample.exe");</pre>
        <div class="alert alert-error">
          <h4>Warning!</h4>
          <p>
            Dandy Doc is only as thread safe as Mono.Cecil and as of 0.9.5.4 it is not very thread safe!
            When constructing an assembly definition collection you can pass <code>true</code> to the
            immediate parameter to have the required parts of an assembly loaded during construction (I hope).
            There are also some bad tests related to this issue: <a href="https://github.com/aarondandy/dandy-doc/blob/master/tests/TestLibrary1.SimpleModels.Test/ThreadProblemsTest.cs">ThreadProblemsTest</a>
          </p>

          <p>
            Example: <code>new AssemblyDefinitionCollection(true, "QuickStartSample.exe");</code>
          </p>
        </div>

        <h3>Step 2: Models</h3>
        <p>
          The easiest way to get started is to use the <a href="@Url.Action("Api", "Docs", new { cRef = "T:DandyDoc.SimpleModels.SimpleModelRepository" })">SimpleModelRepository</a>.
          It provides a few properties that allow you to rummage through your assemblies organized by namespace.
        </p>
        <pre>
var repository = new SimpleModelRepository(assemblies);
foreach (var namespaceModel in repository.Namespaces){
	foreach (var typeModel in namespaceModel.Types){
		// stuff
	}
}
</pre>

        <h3>Step 3: Presentation</h3>
        <p>
          You are own your own for this part but that is the whole point.
          Check out the <a href="https://github.com/aarondandy/dandy-doc/blob/master/website/DandyDocSite/Controllers/DocsController.cs">DocsController</a> for an example.
        </p>

      </section>
      <section>
        <h2>A Simple Sample.</h2>
        <figure>
          <figcaption>A simple example that outputs types to the console.</figcaption>
          <pre>
using System;
using System.IO;
using System.Linq;
using DandyDoc.CRef;
using DandyDoc.CodeDoc;
using DandyDoc.Reflection;
using DandyDoc.XmlDoc;

namespace ConsoleApplication2
{

    /// &lt;summary&gt;
    /// Just a thing.
    /// &lt;/summary&gt;
    public class Thing1 { }

    public class Thing2 : Thing1 { }
      
    /// &lt;inheritdoc/&gt;
    public class MyObject : object { }

    class Program
    {
        static void Main(string[] args) {

            // just find some random assembly to document
            var assemblyToDocument = typeof (Program).Assembly;
            
            // locate the XML doc file by first finding the assembly file then change the extension
            var assemblyFilePath = Uri.UnescapeDataString(assemblyToDocument.GetFilePath()); // TODO: remove UnescapeDataString after 5.1.3
            var xmlDocFilePath = Path.ChangeExtension(assemblyFilePath, "XML");
            // if the file was found, use it
            var xmlDocs = new XmlAssemblyDocumentCollection();
            if(File.Exists(xmlDocFilePath))
                xmlDocs.Add(new XmlAssemblyDocument(xmlDocFilePath));
            // create a code reference lookup from the assembly
            var cRefLookup = new ReflectionCRefLookup(assemblyToDocument);
            // bring all those things together to make a repository for our types
            var myRepository = new ReflectionCodeDocMemberRepository(cRefLookup, xmlDocs);

            // lets make an msdn repository too so we can merge information from there
            var msdnRepository = new MsdnCodeDocMemberRepository();
            var searchContext = new CodeDocRepositorySearchContext(new ICodeDocMemberRepository[]{myRepository, msdnRepository});

            // just spit out all the namespaces and types as an example
            foreach (var namespaceModel in myRepository.Namespaces) {
                Console.WriteLine("Namespace: {0}", namespaceModel.FullName);
                foreach (var typeCRef in namespaceModel.TypeCRefs) {
                    var model = searchContext.CloneWithOneUnvisited(myRepository).Search(typeCRef);
                    Console.WriteLine("Type: {0} {1}", model.Title, model.SubTitle);
                    if(model.HasSummaryContents)
                        Console.WriteLine(String.Concat("\t",String.Concat(model.SummaryContents.Select(x => x.Node.OuterXml))));
                }
            }
            
            Console.WriteLine("Press the [Any] key to terminate.");
            Console.ReadKey();

        }
    }
}
</pre>
        </figure>
      </section>