@using DandyDoc.CodeDoc;
@using DandyDoc.Web.Mvc4.Helpers
@model ICodeDocType
@{
  Layout = "./_Layout.cshtml";
  var memberSets = new[] {
    new {Title = "Nested Types", Members = Model.NestedTypes},
    new {Title = "Delegates", Members = Model.NestedDelegates},
    new {Title = "Constructors", Members = Model.Constructors},
    new {Title = "Properties", Members = Model.Properties},
    new {Title = "Fields", Members = Model.Fields},
    new {Title = "Methods", Members = Model.Methods},
    new {Title = "Events", Members = Model.Events},
    new {Title = "Operators", Members = Model.Operators}
  }.Where(set => set.Members != null && set.Members.Count > 0);

  if (Model.HasBaseChain || Model.HasDirectInterfaces) {
  <section>
    <h2>Inheritance</h2>
    @if (Model.HasBaseChain) {
      <dl>
        <dt>Base Types</dt>
        <dd>@Html.ActionLinkList(Model.BaseChain)</dd>
      </dl>
    }
    @if (Model.HasDirectInterfaces) {
      <dl>
        <dt>Implements</dt>
        <dd>@Html.ActionLinkList(Model.DirectInterfaces)</dd>
      </dl>
    }
  </section>
  }

  if (Model.HasGenericParameters) {
  <section>
    <h2>Generic Parameters</h2>
    @Html.CodeDocParameters(Model.GenericParameters)
  </section>
  }

  foreach (var memberSet in memberSets) {
  <section>
    <h2>@memberSet.Title</h2>
    @Html.CodeDocEntityTable(memberSet.Members)
  </section>
  }
  
}
