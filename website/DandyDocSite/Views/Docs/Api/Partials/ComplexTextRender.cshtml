@using DandyDoc.SimpleModels.ComplexText
@model DandyDoc.SimpleModels.Contracts.IComplexTextNode
@if (Model is RawComplexText){
	@Html.Raw(((RawComplexText) Model).Text)
}
else if (Model is StandardComplexText){
	@(((StandardComplexText)Model).Text)
}
else if (Model is TypeParamrefComplexText){
	var specialized = (TypeParamrefComplexText) Model;
	if (specialized.HasChildren){
		Html.RenderPartial("Api/Partials/ComplexTestRenderMultiple", specialized.Children);
	}
	else{
		<code>@specialized.ParameterName</code>
	}
}
else if (Model is CodeComplexText){
	var specialized = (CodeComplexText) Model;
	if (specialized.IsInline){
		<code>@{Html.RenderPartial("Api/Partials/ComplexTestRenderMultiple", specialized.Children);}</code>
	}
	else{
		<pre>@{Html.RenderPartial("Api/Partials/ComplexTestRenderMultiple", specialized.Children);}</pre>
	}
}
else if (Model is DescriptionListComplexText){
	Html.RenderPartial("Api/Partials/ComplexTextRenderDescriptionList", (DescriptionListComplexText)Model);
}
else if (Model is ComplexTextList){
	var specialized = (ComplexTextList) Model;
	if (specialized.HasChildren){
		Html.RenderPartial("Api/Partials/ComplexTestRenderMultiple", specialized.Children);
	}
}
else{
	throw new NotSupportedException();
}